import { Context, Telegraf } from "telegraf";
import { Update } from "telegraf/typings/core/types/typegram"
import keyboards from "../keyboards";
import { Message } from "../../base/types";
import priceList from "../priceList";
import EmailChecker from "../../base/emailHandler";

export default async function AARootHandler(onTextMessage: Message, db: any, bot: Telegraf<Context<Update>>) {

    bot.command('status', async (ctx) => {
        const user_subs = await db.get(ctx.chat.id)('subs'),
            subsDate: any = user_subs && user_subs !== '' ? 
            ( user_subs === 'unlimit' ? 'unlimit' : new Date(user_subs) ): 
            false;

        if (subsDate === 'unlimit') {
            ctx.reply(`–í—ã –∏–º–µ–µ—Ç–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É`);
        }
        else if (subsDate instanceof Date){
            ctx.reply(`–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${subsDate.getDate()}.${subsDate.getMonth() + 1}.${subsDate.getFullYear()}`, {
                reply_markup: {
                    keyboard: keyboards.AARoot()
                }
            });
        }
        else ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –µ—ë –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'", {
            reply_markup: {
                keyboard: keyboards.AARoot()
            }
        });

        await db.set(ctx.chat.id)('state')('AARoot');
    })

    bot.command('sysinfo', async (ctx) => {
        ctx.reply(`–ë–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ (SuperVisingBot) –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –¢–ì–ö "–ó–∞–∫—Ä—ã—Ç–∞—è –ó–æ–Ω–∞üîû"\n\n<b>–í–µ—Ä—Å–∏—è:</b> 1.0\n\n<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> Yaroslav Volkivskyi (TheLaidSon)\n\n<b>Telegram:</b> <a href="https://t.me/darksidecookis">@darksidecookis</a>\n<b>Instagram:</b> <a href="https://www.instagram.com/watthatt">watthatt</a>`)
    })

    onTextMessage('AARoot', async (ctx, user, set, data) => {
        if (user.subs !== 'unlimit'){
            switch (data.text){
                case "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É":
                    ctx.reply(`–í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã - ${user.email}\n\n–í–≤–µ–¥–∏—Ç–µ /status –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª–∏–±–æ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã`);
                    await set('state')('EmailChangeHandler');
                    break;
    
                case "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ":
                    ctx.reply(priceList, {
                        reply_markup: {
                            keyboard: keyboards.tarifs()
                        }
                    })
        
                    await set('state')('PaymentTypeRequest');
                    break;
    
                default: 
                    ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
                    break;
            }
        }
        else ctx.reply("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –ø–æ–¥—Å–ø–∏–∫—É, –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!");
    })

    onTextMessage('EmailChangeHandler', async (ctx, user, set, data) => {
        if (await EmailChecker(ctx, data.text, user.email, db)){
            await set('email')(data.text);
            ctx.reply("–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - /status");
        }
    })
}